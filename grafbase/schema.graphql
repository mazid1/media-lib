type Favorites {
  movies: [String!]! @default(value: [])
  animes: [String!]! @default(value: [])
}

type User @model {
  name: String!
  email: Email! @unique
  passwordHash: String!
  favorites: Favorites!
    @default(value: { movies: [], animes: [] })
    @auth(rules: [{ allow: private, operations: ["read", "create", "update"] }])
}

extend schema
  # @graphql(
  #   namespace: "anilist"
  #   url: "https://graphql.anilist.co"
  #   transforms: { exclude: ["Mutation.*"] }
  # )
  @openapi(
    namespace: "tmdb"
    schema: "{{ env.TMDB_SCHEMA_URL }}"
    url: "https://api.themoviedb.org"
    headers: [
      { name: "Authorization", value: "Bearer {{ env.TMDB_KEY }}" }
      { name: "accept", value: "application/json" }
    ]
    transforms: { exclude: ["Mutation.*"] }
  )
  @cache(
    rules: [{ types: ["TmdbQuery"], maxAge: 300, staleWhileRevalidate: 300 }]
  )
  @auth(
    providers: [
      {
        type: jwt
        issuer: "{{ env.ISSUER_URL }}"
        secret: "{{ env.NEXTAUTH_SECRET }}"
      }
    ]
  ) {
  query: Query
}

extend type TmdbMoviePopularListResults {
  isFavorite: Boolean!
    @default(value: false)
    @resolver(name: "tmdb/MoviePopularListResults/isFavorite")
}

# Start your backend
# https://grafbase.com/docs/cli
# npx grafbase dev
